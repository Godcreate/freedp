#!/usr/bin/env python3
# -*- coding: utf-8 -*-
#
# python-binance documentation build configuration file, created by
# sphinx-quickstart on Thu Sep 21 20:24:54 2017.
#
# This file is execfile()d with the current directory set to its
# containing dir.
#
# Note that not all possible configuration values are present in this
# autogenerated file.
#
# All configuration values have a default; values that are commented out
# serve to show the default.

# 如果扩展（或要用 autodoc 文档化的模块）在其他目录中，
# 请在此处将这些目录添加到 sys.path 中。如果目录相对于
# 文档根目录，请使用 os.path.abspath 将其转换为绝对路径，如下所示。
#
import os
import sys
sys.path.insert(0, os.path.abspath('..'))  # 将上级目录添加到系统路径中，以便导入模块


# -- General configuration ------------------------------------------------

# 如果您的文档需要一个最小的 Sphinx 版本，请在此处声明。
#
# needs_sphinx = '1.0'

# 在此处添加任何 Sphinx 扩展模块名称，作为字符串。它们可以是
# 随 Sphinx 提供的扩展（命名为 'sphinx.ext.*'）或您自定义的扩展。
extensions = [
    'sphinx.ext.autodoc',  # 自动文档生成
    'sphinx.ext.imgmath',  # 支持图像数学公式
    'sphinx.ext.viewcode',  # 显示源代码
    'sphinx.ext.githubpages'  # 支持 GitHub Pages
]

# 添加任何包含模板的路径，这些路径相对于此目录。
templates_path = ['_templates']  # 模板路径

# 源文件的后缀名。
# 您可以指定多个后缀名作为字符串列表：
#
# source_suffix = ['.rst', '.md']
source_suffix = '.rst'  # 源文件后缀为 .rst

# 主 toctree 文档。
master_doc = 'index'  # 主文档为 index.rst

# 项目的基本信息。
project = 'python-binance'  # 项目名称
copyright = '2017, Sam McHardy'  # 版权信息
author = 'Sam McHardy'  # 作者名称

# 项目的版本信息，用于替换 |version| 和 |release|，也用于构建文档中的其他地方。
#
# 短的 X.Y 版本。
version = '0.2.0'  # 短版本号
# 完整版本，包括 alpha/beta/rc 标签。
release = '0.2.0'  # 完整版本号

# Sphinx 自动生成内容的语言。请参考文档以获取支持的语言列表。
#
# 如果您通过 gettext 目录进行内容翻译，通常会从命令行设置 "language"。
language = None  # 默认语言为 None

# 相对于源目录的模式列表，匹配在查找源文件时要忽略的文件和目录。
# 这些模式也会影响 html_static_path 和 html_extra_path
exclude_patterns = ['_build', 'Thumbs.db', '.DS_Store']  # 要忽略的文件和目录

# 要使用的 Pygments（语法高亮）样式的名称。
pygments_style = 'sphinx'  # 语法高亮样式

# 如果为 True，`todo` 和 `todoList` 产生输出，否则不产生任何输出。
todo_include_todos = False  # 不包括待办事项


# -- Options for HTML output ----------------------------------------------

# 用于 HTML 和 HTML 帮助页面的主题。请参阅文档以获取内置主题的列表。
#
# html_theme = 'alabaster'
html_theme = 'sphinx_rtd_theme'  # 使用 Read the Docs 主题

# 主题选项是特定于主题的，并进一步自定义主题的外观和感觉。
# 有关每个主题可用选项的列表，请参阅文档。
#
# html_theme_options = {}

# 添加任何包含自定义静态文件（例如样式表）的路径，这些路径相对于此目录。
# 它们在内置静态文件之后复制，因此名为 "default.css" 的文件将覆盖内置的 "default.css"。
html_static_path = ['_static']  # 自定义静态文件路径

# 自定义侧边栏模板，必须是一个字典，将文档名称映射到模板名称。
#
# 这对于 alabaster 主题是必需的
# refs: http://alabaster.readthedocs.io/en/latest/installation.html#sidebars
html_sidebars = {
    '**': [
        'about.html',  # 关于页面
        'navigation.html',  # 导航页面
        'relations.html',  # 需要 'show_related': True 主题选项以显示
        'searchbox.html',  # 搜索框
        'donate.html',  # 捐赠页面
    ]
}


# -- Options for HTMLHelp output ------------------------------------------

# HTML 帮助生成器的输出文件基本名称。
htmlhelp_basename = 'python-binancedoc'  # HTML 帮助文档的基本名称


# -- Options for LaTeX output ---------------------------------------------

latex_elements = {
    # 纸张大小（'letterpaper' 或 'a4paper'）。
    #
    # 'papersize': 'letterpaper',

    # 字体大小（'10pt'，'11pt' 或 '12pt'）。
    #
    # 'pointsize': '10pt',

    # LaTeX 前言的附加内容。
    #
    # 'preamble': '',

    # LaTeX 图形（浮动）对齐
    #
    # 'figure_align': 'htbp',
}

# 将文档树分组到 LaTeX 文件中。元组列表
# （源开始文件，目标名称，标题，
#  作者，文档类 [howto，manual 或自定义类]）。
latex_documents = [
    (master_doc, 'python-binance.tex', 'python-binance Documentation',
     'Sam McHardy', 'manual'),  # LaTeX 文档信息
]


# -- Options for manual page output ---------------------------------------

# 每个手册页面的一个条目。元组列表
# （源开始文件，名称，描述，作者，手册部分）。
man_pages = [
    (master_doc, 'python-binance', 'python-binance Documentation',
     [author], 1)  # 手册页面信息
]


# -- Options for Texinfo output -------------------------------------------

# 将文档树分组到 Texinfo 文件中。元组列表
# （源开始文件，目标名称，标题，作者，
#  目录菜单条目，描述，类别）
texinfo_documents = [
    (master_doc, 'python-binance', 'python-binance Documentation',
     author, 'python-binance', 'One line description of project.',
     'Miscellaneous'),  # Texinfo 文档信息
]


def skip(app, what, name, obj, skip, options):
    # 确保 __init__ 方法被记录。
    if name == "__init__":
        return False  # 不跳过 __init__ 方法
    return skip  # 返回跳过状态


def setup(app):
    app.connect("autodoc-skip-member", skip)  # 连接跳过成员的事件